/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

interface DeployedContracts {
  [networkId: number]: { [contractName: string]: ContractInfo };
}

interface ContractInfo {
  address: string;
  abi: any[]; // Consider using a more specific type for ABI if possible
  inheritedFunctions?: InheritedFunctions; // Adjusted to match the expected type
}

// Assuming InheritedFunctions should be a Record<string, string>, define it accordingly
type InheritedFunctions = Record<string, string>;

let deployedContracts: DeployedContracts = {
  1: {
    YourContract: {
      address: "0x0000000000000000000000000000000000000000",
      abi: [
        // ABI details omitted for brevity
      ],
      inheritedFunctions: {}, // Now correctly typed
    },
  },
};

// Function to update deployedContracts with new data from updateDeployedContract
function updateContracts(updateDeployedContract: { networkId: number; contractName: string; address: string; abi: any[] }) {
  if (updateDeployedContract) {
    const { networkId, contractName, address, abi } = updateDeployedContract;

    if (!deployedContracts[networkId]) {
      deployedContracts[networkId] = {};
    }

    deployedContracts[networkId][contractName] = {
      address,
      abi,
      inheritedFunctions: {}, // Ensure this matches the expected type
    };
    console.log('deployedContracts:', deployedContracts);
  }
}

export { updateContracts };

// Assuming GenericContractsDeclaration expects a structure similar to DeployedContracts but with specific types for abi and inheritedFunctions
export default deployedContracts;